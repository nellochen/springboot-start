spring.profiles.active=dev
spring.application.name=finance

debug=true
spring.output.ansi.enabled=detect
logging.file=logs/finance.log
logging.level.com.xiaofeng=debug
logging.level.root=warn

management.security.enabled=false

#cglib代理
spring.aop.proxy-target-class=true

#spring.cache.ehcache.config=classpath:config/ehcache.xml

spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.check-template-location=true
spring.thymeleaf.suffix=.html
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.content-type=text/html

# \u6A21\u677F\u7684\u6A21\u5F0F
spring.thymeleaf.mode=HTML5

# 数据库访问配置，此处使用mysql为例。
# 主数据源，默认的
#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc\:mysql\://123.57.156.151\:3306/springboot?useUnicode\=true&characterEncoding\=utf8&autoReconnect\=true
#spring.datasource.username=root
#spring.datasource.password=hellowx@xygj2016

spring.datasource.primary.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.primary.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.primary.url=jdbc\:mysql\://localhost\:3306/springboot?useUnicode\=true&characterEncoding\=utf8&autoReconnect\=true
spring.datasource.primary.username=root
spring.datasource.primary.password=

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.primary.initialSize=5
spring.datasource.primary.minIdle=5
spring.datasource.primary.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.primary.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.primary.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.primary.minEvictableIdleTimeMillis=300000
# Oracle请使用select 1 from dual
spring.datasource.primary.validationQuery=SELECT 'x'
spring.datasource.primary.testWhileIdle=true
spring.datasource.primary.testOnBorrow=false
spring.datasource.primary.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.primary.poolPreparedStatements=true
spring.datasource.primary.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.primary.filters=stat,wall,slf4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true

spring.datasource.secondary.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.secondary.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.secondary.url=jdbc\:mysql\://localhost\:3306/springboot2?useUnicode\=true&characterEncoding\=utf8&autoReconnect\=true
spring.datasource.secondary.username=root
spring.datasource.secondary.password=

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.secondary.initialSize=5
spring.datasource.secondary.minIdle=5
spring.datasource.secondary.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.secondary.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.secondary.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.secondary.minEvictableIdleTimeMillis=300000
# Oracle请使用select 1 from dual
spring.datasource.secondary.validationQuery=SELECT 'x'
spring.datasource.secondary.testWhileIdle=true
spring.datasource.secondary.testOnBorrow=false
spring.datasource.secondary.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.secondary.poolPreparedStatements=true
spring.datasource.secondary.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.secondary.filters=stat,wall,slf4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true

#create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
#validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
#spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.show-sql=true 

spring.jpa.properties.hibernate.show_sql=true

# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=localhost
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0

#spring.data.mongodb.uri=mongodb://admin:admin123@localhost:27017/?authSource=finance&authMechanism=SCRAM-SHA-1
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
#spring.data.mongodb.database=finance
spring.data.mongodb.username=admin_finance
spring.data.mongodb.password=admin123
spring.data.mongodb.authentication-database=finance

#spring.datasource.primary.initialize=true
#spring.datasource.primary.schema=classpath:import.sql
mybatis.config-location=classpath:mybatis-config.xml
logging.level.sample.mybatis.mapper=TRACE

spring.mail.host=smtp.qq.com
#spring.mail.port=465
spring.mail.username=chenxf84@qq.com
spring.mail.password=
spring.mail.default-encoding=utf-8
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

#spring.velocity.resource-loader-path: classpath:/templates/

########################################################
###FREEMARKER (FreeMarkerAutoConfiguration)
########################################################
spring.freemarker.allow-request-override=false
spring.freemarker.cache=true
spring.freemarker.check-template-location=true
spring.freemarker.charset=UTF-8
spring.freemarker.content-type=text/html
spring.freemarker.expose-request-attributes=false
spring.freemarker.expose-session-attributes=false
spring.freemarker.expose-spring-macro-helpers=false
#spring.freemarker.prefix=
#spring.freemarker.request-context-attribute=
#spring.freemarker.settings.*=
#spring.freemarker.suffix=.ftl
#spring.freemarker.template-loader-path=classpath:/templates/ #comma-separated list

spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=admin123

com.xiaofeng.blog.name=\u8427\u5CF0
com.xiaofeng.blog.title=spring boot
com.xiaofeng.blog.desc=${com.xiaofeng.blog.name}\u6B63\u5728\u52AA\u529B\u5199<${com.xiaofeng.blog.title}>

# \u968F\u673A\u5B57\u7B26\u4E32
com.xiaofeng.blog.value=${random.value}
# \u968F\u673Aint
com.xiaofeng.blog.number=${random.int}
# \u968F\u673Along
com.xiaofeng.blog.bignumber=${random.long}
# 10\u4EE5\u5185\u7684\u968F\u673A\u6570
com.xiaofeng.blog.test1=${random.int(10)}
# 10-20\u7684\u968F\u673A\u6570
com.xiaofeng.blog.test2=${random.int[10,20]}

