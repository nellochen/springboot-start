package com.xiaofeng.utils.designpatterns.proxy;

import com.xiaofeng.utils.common.XMLUtil;

/**
 * @author Chen Xiaofeng
 * @version 1.0.0
 * @date 2017/07/21
 * @email chenxf84@gmail.com
 */

//15.7 代理模式效果与适用场景
//        代理模式是常用的结构型设计模式之一，它为对象的间接访问提供了一个解决方案，可以对对象的访问进行控制。代理模式类型较多，其中远程代理、虚拟代理、保护代理等在软件开发中应用非常广泛。
//        15.7.1 模式优点
//        代理模式的共同优点如下：
//        (1) 能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。
//        (2) 客户端可以针对抽象主题角色进行编程，增加和更换代理类无须修改源代码，符合开闭原则，系统具有较好的灵活性和可扩展性。
//        此外，不同类型的代理模式也具有独特的优点，例如：
//        (1) 远程代理为位于两个不同地址空间对象的访问提供了一种实现机制，可以将一些消耗资源较多的对象和操作移至性能更好的计算机上，提高系统的整体运行效率。
//        (2) 虚拟代理通过一个消耗资源较少的对象来代表一个消耗资源较多的对象，可以在一定程度上节省系统的运行开销。
//        (3) 缓冲代理为某一个操作的结果提供临时的缓存存储空间，以便在后续使用中能够共享这些结果，优化系统性能，缩短执行时间。
//        (4) 保护代理可以控制对一个对象的访问权限，为不同用户提供不同级别的使用权限。
//        15.7.2 模式缺点
//        代理模式的主要缺点如下：
//        (1) 由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢，例如保护代理。
//        (2) 实现代理模式需要额外的工作，而且有些代理模式的实现过程较为复杂，例如远程代理。
//        15.7.3 模式适用场景
//        代理模式的类型较多，不同类型的代理模式有不同的优缺点，它们应用于不同的场合：
//        (1) 当客户端对象需要访问远程主机中的对象时可以使用远程代理。
//        (2) 当需要用一个消耗资源较少的对象来代表一个消耗资源较多的对象，从而降低系统开销、缩短运行时间时可以使用虚拟代理，例如一个对象需要很长时间才能完成加载时。
//        (3) 当需要为某一个被频繁访问的操作结果提供一个临时存储空间，以供多个客户端共享访问这些结果时可以使用缓冲代理。通过使用缓冲代理，系统无须在客户端每一次访问时都重新执行操作，只需直接从临时缓冲区获取操作结果即可。
//        (4) 当需要控制对一个对象的访问，为不同用户提供不同级别的访问权限时可以使用保护代理。
//        (5) 当需要为一个对象的访问（引用）提供一些额外的操作时可以使用智能引用代理。
public class Client {

    public static void main(String[] args) {

        //反射生成对象，针对抽象编程，客户端无须分辨真实主题类和代理类
        ISearcher searcher;
        searcher = (ISearcher) XMLUtil.getBean("config-proxy.xml");

        String result = searcher.DoSearch("杨过", "玉女心经");
        System.out.println(result);
    }
}
